
package org.top.java.netty.source.channel;

import io.netty.buffer.ByteBuf;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.*;
import io.netty.util.concurrent.UnorderedThreadPoolEventExecutor;
import org.top.java.netty.source.util.concurrent.EventExecutorGroup;

import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SocketChannel;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.NoSuchElementException;


/**
 * A list of {@link io.netty.channel.ChannelHandler}s which handles or intercepts inbound events and outbound operations of a
 * {@link io.netty.channel.Channel}.  {@link ChannelPipeline} implements an advanced form of the
 * <a href="https://www.oracle.com/technetwork/java/interceptingfilter-142169.html">Intercepting Filter</a> pattern
 * to give a user full control over how an event is handled and how the {@link io.netty.channel.ChannelHandler}s in a pipeline
 * interact with each other.
 *
 * <h3>Creation of a pipeline</h3>
 *
 * Each channel has its own pipeline and it is created automatically when a new channel is created.
 *
 * <h3>How an event flows in a pipeline</h3>
 *
 * The following diagram describes how I/O events are processed by {@link io.netty.channel.ChannelHandler}s in a {@link ChannelPipeline}
 * typically. An I/O event is handled by either a {@link io.netty.channel.ChannelInboundHandler} or a {@link io.netty.channel.ChannelOutboundHandler}
 * and be forwarded to its closest handler by calling the event propagation methods defined in
 * {@link ChannelHandlerContext}, such as {@link ChannelHandlerContext#fireChannelRead(Object)} and
 * {@link ChannelHandlerContext#write(Object)}.
 *
 * <pre>
 *                                                 I/O Request
 *                                            via {@link io.netty.channel.Channel} or
 *                                        {@link ChannelHandlerContext}
 *                                                      |
 *  +---------------------------------------------------+---------------+
 *  |                           ChannelPipeline         |               |
 *  |                                                  |/              |
 *  |    +---------------------+            +-----------+----------+    |
 *  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|                                  |               |
 *  |               |                                  |/              |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|                                  .               |
 *  |               .                                   .               |
 *  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|
 *  |        [ method call]                       [method call]         |
 *  |               .                                   .               |
 *  |               .                                  |/              |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|                                  |               |
 *  |               |                                  |/              |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|                                  |               |
 *  +---------------+-----------------------------------+---------------+
 *                  |                                  |/
 *  +---------------+-----------------------------------+---------------+
 *  |               |                                   |               |
 *  |       [ Socket.read() ]                    [ Socket.write() ]     |
 *  |                                                                   |
 *  |  Netty Internal I/O Threads (Transport Implementation)            |
 *  +-------------------------------------------------------------------+
 * </pre>
 * An inbound event is handled by the inbound handlers in the bottom-up direction as shown on the left side of the
 * diagram.  An inbound handler usually handles the inbound data generated by the I/O thread on the bottom of the
 * diagram.  The inbound data is often read from a remote peer via the actual input operation such as
 * {@link SocketChannel#read(ByteBuffer)}.  If an inbound event goes beyond the top inbound handler, it is discarded
 * silently, or logged if it needs your attention.
 * <p>
 * An outbound event is handled by the outbound handler in the top-down direction as shown on the right side of the
 * diagram.  An outbound handler usually generates or transforms the outbound traffic such as write requests.
 * If an outbound event goes beyond the bottom outbound handler, it is handled by an I/O thread associated with the
 * {@link io.netty.channel.Channel}. The I/O thread often performs the actual output operation such as
 * {@link SocketChannel#write(ByteBuffer)}.
 * <p>
 * For example, let us assume that we created the following pipeline:
 * <pre>
 * {@link ChannelPipeline} p = ...;
 * p.addLast("1", new InboundHandlerA());
 * p.addLast("2", new InboundHandlerB());
 * p.addLast("3", new OutboundHandlerA());
 * p.addLast("4", new OutboundHandlerB());
 * p.addLast("5", new InboundOutboundHandlerX());
 * </pre>
 * In the example above, the class whose name starts with {@code Inbound} means it is an inbound handler.
 * The class whose name starts with {@code Outbound} means it is a outbound handler.
 * <p>
 * In the given example configuration, the handler evaluation order is 1, 2, 3, 4, 5 when an event goes inbound.
 * When an event goes outbound, the order is 5, 4, 3, 2, 1.  On top of this principle, {@link ChannelPipeline} skips
 * the evaluation of certain handlers to shorten the stack depth:
 * <ul>
 * <li>3 and 4 don't implement {@link io.netty.channel.ChannelInboundHandler}, and therefore the actual evaluation order of an inbound
 *     event will be: 1, 2, and 5.</li>
 * <li>1 and 2 don't implement {@link io.netty.channel.ChannelOutboundHandler}, and therefore the actual evaluation order of a
 *     outbound event will be: 5, 4, and 3.</li>
 * <li>If 5 implements both {@link ChannelInboundHandler} and {@link ChannelOutboundHandler}, the evaluation order of
 *     an inbound and a outbound event could be 125 and 543 respectively.</li>
 * </ul>
 *
 * <h3>Forwarding an event to the next handler</h3>
 *
 * As you might noticed in the diagram shows, a handler has to invoke the event propagation methods in
 * {@link ChannelHandlerContext} to forward an event to its next handler.  Those methods include:
 * <ul>
 * <li>Inbound event propagation methods:
 *     <ul>
 *     <li>{@link ChannelHandlerContext#fireChannelRegistered()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelActive()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelRead(Object)}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelReadComplete()}</li>
 *     <li>{@link ChannelHandlerContext#fireExceptionCaught(Throwable)}</li>
 *     <li>{@link ChannelHandlerContext#fireUserEventTriggered(Object)}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelWritabilityChanged()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelInactive()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelUnregistered()}</li>
 *     </ul>
 * </li>
 * <li>Outbound event propagation methods:
 *     <ul>
 *     <li>{@link ChannelHandlerContext#bind(SocketAddress, ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#connect(SocketAddress, SocketAddress, ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#write(Object, ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#flush()}</li>
 *     <li>{@link ChannelHandlerContext#read()}</li>
 *     <li>{@link ChannelHandlerContext#disconnect(ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#close(ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#deregister(ChannelPromise)}</li>
 *     </ul>
 * </li>
 * </ul>
 *
 * and the following example shows how the event propagation is usually done:
 *
 * <pre>
 * public class MyInboundHandler extends {@link ChannelInboundHandlerAdapter} {
 *     {@code @Override}
 *     public void channelActive({@link ChannelHandlerContext} ctx) {
 *         System.out.println("Connected!");
 *         ctx.fireChannelActive();
 *     }
 * }
 *
 * public class MyOutboundHandler extends {@link ChannelOutboundHandlerAdapter} {
 *     {@code @Override}
 *     public void close({@link ChannelHandlerContext} ctx, {@link ChannelPromise} promise) {
 *         System.out.println("Closing ..");
 *         ctx.close(promise);
 *     }
 * }
 * </pre>
 *
 * <h3>Building a pipeline</h3>
 * <p>
 * A user is supposed to have one or more {@link io.netty.channel.ChannelHandler}s in a pipeline to receive I/O events (e.g. read) and
 * to request I/O operations (e.g. write and close).  For example, a typical server will have the following handlers
 * in each channel's pipeline, but your mileage may vary depending on the complexity and characteristics of the
 * protocol and business logic:
 *
 * <ol>
 * <li>Protocol Decoder - translates binary data (e.g. {@link ByteBuf}) into a Java object.</li>
 * <li>Protocol Encoder - translates a Java object into binary data.</li>
 * <li>Business Logic Handler - performs the actual business logic (e.g. database access).</li>
 * </ol>
 *
 * and it could be represented as shown in the following example:
 *
 * <pre>
 * static final {@link EventExecutorGroup} group = new {@link DefaultEventExecutorGroup}(16);
 * ...
 *
 * {@link ChannelPipeline} pipeline = ch.pipeline();
 *
 * pipeline.addLast("decoder", new MyProtocolDecoder());
 * pipeline.addLast("encoder", new MyProtocolEncoder());
 *
 * // Tell the pipeline to run MyBusinessLogicHandler's event handler methods
 * // in a different thread than an I/O thread so that the I/O thread is not blocked by
 * // a time-consuming task.
 * // If your business logic is fully asynchronous or finished very quickly, you don't
 * // need to specify a group.
 * pipeline.addLast(group, "handler", new MyBusinessLogicHandler());
 * </pre>
 *
 * Be aware that while using {@link DefaultEventLoopGroup} will offload the operation from the {@link EventLoop} it will
 * still process tasks in a serial fashion per {@link ChannelHandlerContext} and so guarantee ordering. Due the ordering
 * it may still become a bottle-neck. If ordering is not a requirement for your use-case you may want to consider using
 * {@link UnorderedThreadPoolEventExecutor} to maximize the parallelism of the task execution.
 *
 * <h3>Thread safety</h3>
 * <p>
 * A {@link io.netty.channel.ChannelHandler} can be added or removed at any time because a {@link ChannelPipeline} is thread safe.
 * For example, you can insert an encryption handler when sensitive information is about to be exchanged, and remove it
 * after the exchange.
 */


/**
 * {@link io.netty.channel.ChannelHandler} 的列表，用于处理或拦截 {@link io.netty.channel.Channel} 的入站事件和出站操作。
 * {@link ChannelPipeline} 实现了 <a href="https://www.oracle.com/technetwork/java/interceptingfilter-142169.html">拦截过滤器</a> 模式的高级形式，
 * 使用户能够完全控制事件的处理方式以及管道中的 {@link io.netty.channel.ChannelHandler} 之间的交互。
 *
 * <h3>管道的创建</h3>
 *
 * 每个通道都有自己的管道，当创建新通道时会自动创建管道。
 *
 * <h3>事件在管道中的流动</h3>
 *
 * 以下图表描述了 {@link ChannelPipeline} 中的 {@link io.netty.channel.ChannelHandler} 通常如何处理 I/O 事件。
 * I/O 事件由 {@link io.netty.channel.ChannelInboundHandler} 或 {@link io.netty.channel.ChannelOutboundHandler} 处理，
 * 并通过调用 {@link ChannelHandlerContext} 中定义的事件传播方法（如 {@link ChannelHandlerContext#fireChannelRead(Object)} 和
 * {@link ChannelHandlerContext#write(Object)}）将其转发给最近的处理程序。
 *
 * <pre>
 *                                                 I/O 请求
 *                                           通过 {@link io.netty.channel.Channel} 或
 *                                        {@link ChannelHandlerContext}
 *                                                      |
 *  +---------------------------------------------------+---------------+
 *  |                           ChannelPipeline         |               |
 *  |                                                  \|/              |
 *  |    +---------------------+            +-----------+----------+    |
 *  |    | Inbound Handler  N  |            | Outbound Handler  1  |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|\                                  |               |
 *  |               |                                  \|/              |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |    | Inbound Handler N-1 |            | Outbound Handler  2  |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|\                                  .               |
 *  |               .                                   .               |
 *  | ChannelHandlerContext.fireIN_EVT() ChannelHandlerContext.OUT_EVT()|
 *  |        [ 方法调用]                       [方法调用]         |
 *  |               .                                   .               |
 *  |               .                                  \|/              |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |    | Inbound Handler  2  |            | Outbound Handler M-1 |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|\                                  |               |
 *  |               |                                  \|/              |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |    | Inbound Handler  1  |            | Outbound Handler  M  |    |
 *  |    +----------+----------+            +-----------+----------+    |
 *  |              /|\                                  |               |
 *  +---------------+-----------------------------------+---------------+
 *                  |                                  \|/
 *  +---------------+-----------------------------------+---------------+
 *  |               |                                   |               |
 *  |       [ Socket.read() ]                    [ Socket.write() ]     |
 *  |                                                                   |
 *  |  Netty 内部 I/O 线程（传输实现）            |
 *  +-------------------------------------------------------------------+
 * </pre>
 * 入站事件由入站处理程序自下而上处理，如图表左侧所示。入站处理程序通常处理由图表底部的 I/O 线程生成的入站数据。
 * 入站数据通常通过实际输入操作（如 {@link SocketChannel#read(ByteBuffer)}）从远程对等方读取。
 * 如果入站事件超出顶部入站处理程序，它将被静默丢弃，或者如果需要您的注意，则会记录日志。
 * <p>
 * 出站事件由出站处理程序自上而下处理，如图表右侧所示。出站处理程序通常生成或转换出站流量，如写请求。
 * 如果出站事件超出底部出站处理程序，它将由与 {@link io.netty.channel.Channel} 关联的 I/O 线程处理。
 * I/O 线程通常执行实际输出操作，如 {@link SocketChannel#write(ByteBuffer)}。
 * <p>
 * 例如，假设我们创建了以下管道：
 * <pre>
 * {@link ChannelPipeline} p = ...;
 * p.addLast("1", new InboundHandlerA());
 * p.addLast("2", new InboundHandlerB());
 * p.addLast("3", new OutboundHandlerA());
 * p.addLast("4", new OutboundHandlerB());
 * p.addLast("5", new InboundOutboundHandlerX());
 * </pre>
 * 在上面的示例中，名称以 {@code Inbound} 开头的类表示它是入站处理程序。
 * 名称以 {@code Outbound} 开头的类表示它是出站处理程序。
 * <p>
 * 在给定的示例配置中，当事件入站时，处理程序的评估顺序为 1, 2, 3, 4, 5。
 * 当事件出站时，顺序为 5, 4, 3, 2, 1。在此原则之上，{@link ChannelPipeline} 会跳过某些处理程序的评估以缩短堆栈深度：
 * <ul>
 * <li>3 和 4 未实现 {@link io.netty.channel.ChannelInboundHandler}，因此入站事件的实际评估顺序为：1, 2, 和 5。</li>
 * <li>1 和 2 未实现 {@link io.netty.channel.ChannelOutboundHandler}，因此出站事件的实际评估顺序为：5, 4, 和 3。</li>
 * <li>如果 5 同时实现了 {@link ChannelInboundHandler} 和 {@link ChannelOutboundHandler}，则入站和出站事件的评估顺序可能分别为 125 和 543。</li>
 * </ul>
 *
 * <h3>将事件转发给下一个处理程序</h3>
 *
 * 正如您在图表中所见，处理程序必须调用 {@link ChannelHandlerContext} 中的事件传播方法将事件转发给下一个处理程序。这些方法包括：
 * <ul>
 * <li>入站事件传播方法：
 *     <ul>
 *     <li>{@link ChannelHandlerContext#fireChannelRegistered()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelActive()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelRead(Object)}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelReadComplete()}</li>
 *     <li>{@link ChannelHandlerContext#fireExceptionCaught(Throwable)}</li>
 *     <li>{@link ChannelHandlerContext#fireUserEventTriggered(Object)}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelWritabilityChanged()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelInactive()}</li>
 *     <li>{@link ChannelHandlerContext#fireChannelUnregistered()}</li>
 *     </ul>
 * </li>
 * <li>出站事件传播方法：
 *     <ul>
 *     <li>{@link ChannelHandlerContext#bind(SocketAddress, ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#connect(SocketAddress, SocketAddress, ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#write(Object, ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#flush()}</li>
 *     <li>{@link ChannelHandlerContext#read()}</li>
 *     <li>{@link ChannelHandlerContext#disconnect(ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#close(ChannelPromise)}</li>
 *     <li>{@link ChannelHandlerContext#deregister(ChannelPromise)}</li>
 *     </ul>
 * </li>
 * </ul>
 *
 * 以下示例展示了事件传播通常是如何完成的：
 *
 * <pre>
 * public class MyInboundHandler extends {@link ChannelInboundHandlerAdapter} {
 *     {@code @Override}
 *     public void channelActive({@link ChannelHandlerContext} ctx) {
 *         System.out.println("已连接！");
 *         ctx.fireChannelActive();
 *     }
 * }
 *
 * public class MyOutboundHandler extends {@link ChannelOutboundHandlerAdapter} {
 *     {@code @Override}
 *     public void close({@link ChannelHandlerContext} ctx, {@link ChannelPromise} promise) {
 *         System.out.println("正在关闭 ..");
 *         ctx.close(promise);
 *     }
 * }
 * </pre>
 *
 * <h3>构建管道</h3>
 * <p>
 * 用户应该在管道中拥有一个或多个 {@link io.netty.channel.ChannelHandler} 以接收 I/O 事件（例如读取）并请求 I/O 操作（例如写入和关闭）。
 * 例如，典型的服务器将在每个通道的管道中具有以下处理程序，但您的需求可能会根据协议和业务逻辑的复杂性和特性而有所不同：
 *
 * <ol>
 * <li>协议解码器 - 将二进制数据（例如 {@link ByteBuf}）转换为 Java 对象。</li>
 * <li>协议编码器 - 将 Java 对象转换为二进制数据。</li>
 * <li>业务逻辑处理程序 - 执行实际的业务逻辑（例如数据库访问）。</li>
 * </ol>
 *
 * 它可以表示为以下示例：
 *
 * <pre>
 * static final {@link EventExecutorGroup} group = new {@link DefaultEventExecutorGroup}(16);
 * ...
 *
 * {@link ChannelPipeline} pipeline = ch.pipeline();
 *
 * pipeline.addLast("decoder", new MyProtocolDecoder());
 * pipeline.addLast("encoder", new MyProtocolEncoder());
 *
 * // 告诉管道在不同于 I/O 线程的线程中运行 MyBusinessLogicHandler 的事件处理程序方法，
 * // 以便 I/O 线程不会被耗时的任务阻塞。
 * // 如果您的业务逻辑完全异步或完成得非常快，则不需要指定组。
 * pipeline.addLast(group, "handler", new MyBusinessLogicHandler());
 * </pre>
 *
 * 请注意，虽然使用 {@link DefaultEventLoopGroup} 会将操作从 {@link EventLoop} 中卸载，但它仍然会按 {@link ChannelHandlerContext} 顺序处理任务，
 * 从而保证顺序。由于顺序，它仍然可能成为瓶颈。如果顺序对您的用例不是必需的，您可能需要考虑使用 {@link UnorderedThreadPoolEventExecutor} 以最大化任务执行的并行性。
 *
 * <h3>线程安全</h3>
 * <p>
 * {@link io.netty.channel.ChannelHandler} 可以随时添加或删除，因为 {@link ChannelPipeline} 是线程安全的。
 * 例如，您可以在即将交换敏感信息时插入加密处理程序，并在交换后将其删除。
 */
public interface ChannelPipeline
        extends ChannelInboundInvoker, ChannelOutboundInvoker, Iterable<Entry<String, ChannelHandler>> {

    /**
     * Inserts a {@link io.netty.channel.ChannelHandler} at the first position of this pipeline.
     *
     * @param name     the name of the handler to insert first
     * @param handler  the handler to insert first
     *
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified handler is {@code null}
     */

    /**
     * 在此管道的第一个位置插入一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @param name     要插入的第一个处理程序的名称
     * @param handler  要插入的第一个处理程序
     *
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的处理程序为 {@code null}
     */
    ChannelPipeline addFirst(String name, ChannelHandler handler);

    /**
     * Inserts a {@link io.netty.channel.ChannelHandler} at the first position of this pipeline.
     *
     * @param group    the {@link EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}
     *                 methods
     * @param name     the name of the handler to insert first
     * @param handler  the handler to insert first
     *
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified handler is {@code null}
     */

    /**
     * 将 {@link io.netty.channel.ChannelHandler} 插入到此管道的第一个位置。
     *
     * @param group    用于执行 {@link io.netty.channel.ChannelHandler} 方法的 {@link EventExecutorGroup}
     * @param name     要插入的第一个处理程序的名称
     * @param handler  要插入的第一个处理程序
     *
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的处理程序为 {@code null}
     */
    ChannelPipeline addFirst(EventExecutorGroup group, String name, ChannelHandler handler);

    /**
     * Appends a {@link io.netty.channel.ChannelHandler} at the last position of this pipeline.
     *
     * @param name     the name of the handler to append
     * @param handler  the handler to append
     *
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified handler is {@code null}
     */

    /**
     * 将一个 {@link io.netty.channel.ChannelHandler} 追加到此管道的最后一个位置。
     *
     * @param name     要追加的处理器的名称
     * @param handler  要追加的处理器
     *
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的处理器为 {@code null}
     */
    ChannelPipeline addLast(String name, ChannelHandler handler);

    /**
     * Appends a {@link io.netty.channel.ChannelHandler} at the last position of this pipeline.
     *
     * @param group    the {@link EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}
     *                 methods
     * @param name     the name of the handler to append
     * @param handler  the handler to append
     *
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified handler is {@code null}
     */

    /**
     * 将 {@link io.netty.channel.ChannelHandler} 追加到此管道的最后一个位置。
     *
     * @param group    用于执行 {@link io.netty.channel.ChannelHandler} 方法的 {@link EventExecutorGroup}
     * @param name     要追加的处理程序的名称
     * @param handler  要追加的处理程序
     *
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的处理程序为 {@code null}
     */
    ChannelPipeline addLast(EventExecutorGroup group, String name, ChannelHandler handler);

    /**
     * Inserts a {@link io.netty.channel.ChannelHandler} before an existing handler of this
     * pipeline.
     *
     * @param baseName  the name of the existing handler
     * @param name      the name of the handler to insert before
     * @param handler   the handler to insert before
     *
     * @throws NoSuchElementException
     *         if there's no such entry with the specified {@code baseName}
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified baseName or handler is {@code null}
     */

    /**
     * 在管道中现有处理程序之前插入一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @param baseName  现有处理程序的名称
     * @param name      要插入的处理程序的名称
     * @param handler   要插入的处理程序
     *
     * @throws NoSuchElementException
     *         如果不存在具有指定 {@code baseName} 的条目
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的 baseName 或 handler 为 {@code null}
     */
    ChannelPipeline addBefore(String baseName, String name, ChannelHandler handler);

    /**
     * Inserts a {@link io.netty.channel.ChannelHandler} before an existing handler of this
     * pipeline.
     *
     * @param group     the {@link EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}
     *                  methods
     * @param baseName  the name of the existing handler
     * @param name      the name of the handler to insert before
     * @param handler   the handler to insert before
     *
     * @throws NoSuchElementException
     *         if there's no such entry with the specified {@code baseName}
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified baseName or handler is {@code null}
     */

    /**
     * 在管道中现有处理程序之前插入一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @param group     用于执行 {@link io.netty.channel.ChannelHandler} 方法的 {@link EventExecutorGroup}
     * @param baseName  现有处理程序的名称
     * @param name      要插入的处理程序的名称
     * @param handler   要插入的处理程序
     *
     * @throws NoSuchElementException
     *         如果不存在具有指定 {@code baseName} 的条目
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的 baseName 或 handler 为 {@code null}
     */
    ChannelPipeline addBefore(EventExecutorGroup group, String baseName, String name, ChannelHandler handler);

    /**
     * Inserts a {@link io.netty.channel.ChannelHandler} after an existing handler of this
     * pipeline.
     *
     * @param baseName  the name of the existing handler
     * @param name      the name of the handler to insert after
     * @param handler   the handler to insert after
     *
     * @throws NoSuchElementException
     *         if there's no such entry with the specified {@code baseName}
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified baseName or handler is {@code null}
     */

    /**
     * 在管道中现有处理程序之后插入一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @param baseName  现有处理程序的名称
     * @param name      要插入的处理程序的名称
     * @param handler   要插入的处理程序
     *
     * @throws NoSuchElementException
     *         如果不存在指定 {@code baseName} 的条目
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的 baseName 或 handler 为 {@code null}
     */
    ChannelPipeline addAfter(String baseName, String name, ChannelHandler handler);

    /**
     * Inserts a {@link io.netty.channel.ChannelHandler} after an existing handler of this
     * pipeline.
     *
     * @param group     the {@link EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}
     *                  methods
     * @param baseName  the name of the existing handler
     * @param name      the name of the handler to insert after
     * @param handler   the handler to insert after
     *
     * @throws NoSuchElementException
     *         if there's no such entry with the specified {@code baseName}
     * @throws IllegalArgumentException
     *         if there's an entry with the same name already in the pipeline
     * @throws NullPointerException
     *         if the specified baseName or handler is {@code null}
     */

    /**
     * 在管道中现有处理程序之后插入一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @param group     用于执行 {@link io.netty.channel.ChannelHandler} 方法的 {@link EventExecutorGroup}
     * @param baseName  现有处理程序的名称
     * @param name      要插入的处理程序的名称
     * @param handler   要插入的处理程序
     *
     * @throws NoSuchElementException
     *         如果不存在具有指定 {@code baseName} 的条目
     * @throws IllegalArgumentException
     *         如果管道中已存在具有相同名称的条目
     * @throws NullPointerException
     *         如果指定的 baseName 或 handler 为 {@code null}
     */
    ChannelPipeline addAfter(EventExecutorGroup group, String baseName, String name, ChannelHandler handler);

    /**
     * Inserts {@link io.netty.channel.ChannelHandler}s at the first position of this pipeline.
     *
     * @param handlers  the handlers to insert first
     *
     */

    /**
     * 将 {@link io.netty.channel.ChannelHandler} 插入到此管道的第一个位置。
     *
     * @param handlers  要首先插入的处理器
     *
     */
    ChannelPipeline addFirst(ChannelHandler... handlers);

    /**
     * Inserts {@link io.netty.channel.ChannelHandler}s at the first position of this pipeline.
     *
     * @param group     the {@link EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}s
     *                  methods.
     * @param handlers  the handlers to insert first
     *
     */

    /**
     * 将 {@link io.netty.channel.ChannelHandler} 插入到此管道的第一个位置。
     *
     * @param group     用于执行 {@link io.netty.channel.ChannelHandler} 方法的 {@link EventExecutorGroup}。
     * @param handlers  要首先插入的处理器
     *
     */
    ChannelPipeline addFirst(EventExecutorGroup group, ChannelHandler... handlers);

    /**
     * Inserts {@link io.netty.channel.ChannelHandler}s at the last position of this pipeline.
     *
     * @param handlers  the handlers to insert last
     *
     */

    /**
     * 将 {@link io.netty.channel.ChannelHandler}s 插入到此管道的最后位置。
     *
     * @param handlers  要插入到最后的处理器
     *
     */
    ChannelPipeline addLast(ChannelHandler... handlers);

    /**
     * Inserts {@link io.netty.channel.ChannelHandler}s at the last position of this pipeline.
     *
     * @param group     the {@link EventExecutorGroup} which will be used to execute the {@link io.netty.channel.ChannelHandler}s
     *                  methods.
     * @param handlers  the handlers to insert last
     *
     */

    /**
     * 将 {@link io.netty.channel.ChannelHandler} 插入到此管道的最后位置。
     *
     * @param group     用于执行 {@link io.netty.channel.ChannelHandler} 方法的 {@link EventExecutorGroup}。
     * @param handlers  要插入到最后的处理器
     *
     */
    ChannelPipeline addLast(EventExecutorGroup group, ChannelHandler... handlers);

    /**
     * Removes the specified {@link io.netty.channel.ChannelHandler} from this pipeline.
     *
     * @param  handler          the {@link io.netty.channel.ChannelHandler} to remove
     *
     * @throws NoSuchElementException
     *         if there's no such handler in this pipeline
     * @throws NullPointerException
     *         if the specified handler is {@code null}
     */

    /**
     * 从该管道中移除指定的 {@link io.netty.channel.ChannelHandler}。
     *
     * @param  handler          要移除的 {@link io.netty.channel.ChannelHandler}
     *
     * @throws NoSuchElementException
     *         如果该管道中没有此处理器
     * @throws NullPointerException
     *         如果指定的处理器为 {@code null}
     */
    ChannelPipeline remove(ChannelHandler handler);

    /**
     * Removes the {@link io.netty.channel.ChannelHandler} with the specified name from this pipeline.
     *
     * @param  name             the name under which the {@link io.netty.channel.ChannelHandler} was stored.
     *
     * @return the removed handler
     *
     * @throws NoSuchElementException
     *         if there's no such handler with the specified name in this pipeline
     * @throws NullPointerException
     *         if the specified name is {@code null}
     */

    /**
     * 从该管道中移除具有指定名称的 {@link io.netty.channel.ChannelHandler}。
     *
     * @param  name             存储 {@link io.netty.channel.ChannelHandler} 时使用的名称。
     *
     * @return 被移除的处理器
     *
     * @throws NoSuchElementException
     *         如果该管道中没有具有指定名称的处理器
     * @throws NullPointerException
     *         如果指定的名称为 {@code null}
     */
    ChannelHandler remove(String name);

    /**
     * Removes the {@link io.netty.channel.ChannelHandler} of the specified type from this pipeline.
     *
     * @param <T>           the type of the handler
     * @param handlerType   the type of the handler
     *
     * @return the removed handler
     *
     * @throws NoSuchElementException
     *         if there's no such handler of the specified type in this pipeline
     * @throws NullPointerException
     *         if the specified handler type is {@code null}
     */

    /**
     * 从该管道中移除指定类型的 {@link io.netty.channel.ChannelHandler}。
     *
     * @param <T>           处理程序的类型
     * @param handlerType   处理程序的类型
     *
     * @return 被移除的处理程序
     *
     * @throws NoSuchElementException
     *         如果该管道中没有指定类型的处理程序
     * @throws NullPointerException
     *         如果指定的处理程序类型为 {@code null}
     */
    <T extends io.netty.channel.ChannelHandler> T remove(Class<T> handlerType);

    /**
     * Removes the first {@link io.netty.channel.ChannelHandler} in this pipeline.
     *
     * @return the removed handler
     *
     * @throws NoSuchElementException
     *         if this pipeline is empty
     */

    /**
     * 移除此管道中的第一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @return 被移除的处理器
     *
     * @throws NoSuchElementException
     *         如果此管道为空
     */
    ChannelHandler removeFirst();

    /**
     * Removes the last {@link io.netty.channel.ChannelHandler} in this pipeline.
     *
     * @return the removed handler
     *
     * @throws NoSuchElementException
     *         if this pipeline is empty
     */

    /**
     * 移除此管道中的最后一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @return 被移除的处理器
     *
     * @throws NoSuchElementException
     *         如果此管道为空
     */
    ChannelHandler removeLast();

    /**
     * Replaces the specified {@link io.netty.channel.ChannelHandler} with a new handler in this pipeline.
     *
     * @param  oldHandler    the {@link io.netty.channel.ChannelHandler} to be replaced
     * @param  newName       the name under which the replacement should be added
     * @param  newHandler    the {@link io.netty.channel.ChannelHandler} which is used as replacement
     *
     * @return itself

     * @throws NoSuchElementException
     *         if the specified old handler does not exist in this pipeline
     * @throws IllegalArgumentException
     *         if a handler with the specified new name already exists in this
     *         pipeline, except for the handler to be replaced
     * @throws NullPointerException
     *         if the specified old handler or new handler is
     *         {@code null}
     */

    /**
     * 将指定的 {@link io.netty.channel.ChannelHandler} 替换为此管道中的新处理器。
     *
     * @param  oldHandler    要替换的 {@link io.netty.channel.ChannelHandler}
     * @param  newName       替换处理器应添加的名称
     * @param  newHandler    用作替换的 {@link io.netty.channel.ChannelHandler}
     *
     * @return 自身

     * @throws NoSuchElementException
     *         如果指定的旧处理器在此管道中不存在
     * @throws IllegalArgumentException
     *         如果具有指定新名称的处理器已存在于此管道中，除非是要替换的处理器
     * @throws NullPointerException
     *         如果指定的旧处理器或新处理器为 {@code null}
     */
    ChannelPipeline replace(ChannelHandler oldHandler, String newName, ChannelHandler newHandler);

    /**
     * Replaces the {@link io.netty.channel.ChannelHandler} of the specified name with a new handler in this pipeline.
     *
     * @param  oldName       the name of the {@link io.netty.channel.ChannelHandler} to be replaced
     * @param  newName       the name under which the replacement should be added
     * @param  newHandler    the {@link io.netty.channel.ChannelHandler} which is used as replacement
     *
     * @return the removed handler
     *
     * @throws NoSuchElementException
     *         if the handler with the specified old name does not exist in this pipeline
     * @throws IllegalArgumentException
     *         if a handler with the specified new name already exists in this
     *         pipeline, except for the handler to be replaced
     * @throws NullPointerException
     *         if the specified old handler or new handler is
     *         {@code null}
     */

    /**
     * 将指定名称的 {@link io.netty.channel.ChannelHandler} 替换为新的处理器。
     *
     * @param  oldName       要替换的 {@link io.netty.channel.ChannelHandler} 的名称
     * @param  newName       替换处理器添加时的名称
     * @param  newHandler    用作替换的 {@link io.netty.channel.ChannelHandler}
     *
     * @return 被移除的处理器
     *
     * @throws NoSuchElementException
     *         如果指定名称的处理器不存在于该管道中
     * @throws IllegalArgumentException
     *         如果指定新名称的处理器已经存在于该管道中，除非是要被替换的处理器
     * @throws NullPointerException
     *         如果指定的旧处理器或新处理器为 {@code null}
     */
    ChannelHandler replace(String oldName, String newName, ChannelHandler newHandler);

    /**
     * Replaces the {@link io.netty.channel.ChannelHandler} of the specified type with a new handler in this pipeline.
     *
     * @param  oldHandlerType   the type of the handler to be removed
     * @param  newName          the name under which the replacement should be added
     * @param  newHandler       the {@link io.netty.channel.ChannelHandler} which is used as replacement
     *
     * @return the removed handler
     *
     * @throws NoSuchElementException
     *         if the handler of the specified old handler type does not exist
     *         in this pipeline
     * @throws IllegalArgumentException
     *         if a handler with the specified new name already exists in this
     *         pipeline, except for the handler to be replaced
     * @throws NullPointerException
     *         if the specified old handler or new handler is
     *         {@code null}
     */

    /**
     * 将管道中指定类型的 {@link io.netty.channel.ChannelHandler} 替换为新的处理器。
     *
     * @param  oldHandlerType   要移除的处理器的类型
     * @param  newName          替换处理器所使用的名称
     * @param  newHandler       用作替换的 {@link io.netty.channel.ChannelHandler}
     *
     * @return 被移除的处理器
     *
     * @throws NoSuchElementException
     *         如果管道中不存在指定类型的处理器
     * @throws IllegalArgumentException
     *         如果管道中已存在指定新名称的处理器，除非是要替换的处理器
     * @throws NullPointerException
     *         如果指定的旧处理器或新处理器为 {@code null}
     */
    <T extends io.netty.channel.ChannelHandler> T replace(Class<T> oldHandlerType, String newName,
                                                          ChannelHandler newHandler);

    /**
     * Returns the first {@link io.netty.channel.ChannelHandler} in this pipeline.
     *
     * @return the first handler.  {@code null} if this pipeline is empty.
     */

    /**
     * 返回此管道中的第一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @return 第一个处理器。如果此管道为空，则返回 {@code null}。
     */
    ChannelHandler first();

    /**
     * Returns the context of the first {@link io.netty.channel.ChannelHandler} in this pipeline.
     *
     * @return the context of the first handler.  {@code null} if this pipeline is empty.
     */

    /**
     * 返回此管道中第一个 {@link io.netty.channel.ChannelHandler} 的上下文。
     *
     * @return 第一个处理器的上下文。如果此管道为空，则返回 {@code null}。
     */
    ChannelHandlerContext firstContext();

    /**
     * Returns the last {@link io.netty.channel.ChannelHandler} in this pipeline.
     *
     * @return the last handler.  {@code null} if this pipeline is empty.
     */

    /**
     * 返回此管道中的最后一个 {@link io.netty.channel.ChannelHandler}。
     *
     * @return 最后一个处理器。如果此管道为空，则返回 {@code null}。
     */
    ChannelHandler last();

    /**
     * Returns the context of the last {@link io.netty.channel.ChannelHandler} in this pipeline.
     *
     * @return the context of the last handler.  {@code null} if this pipeline is empty.
     */

    /**
     * 返回此管道中最后一个 {@link io.netty.channel.ChannelHandler} 的上下文。
     *
     * @return 最后一个处理器的上下文。如果此管道为空，则返回 {@code null}。
     */
    ChannelHandlerContext lastContext();

    /**
     * Returns the {@link io.netty.channel.ChannelHandler} with the specified name in this
     * pipeline.
     *
     * @return the handler with the specified name.
     *         {@code null} if there's no such handler in this pipeline.
     */

    /**
     * 返回此管道中具有指定名称的 {@link io.netty.channel.ChannelHandler}。
     *
     * @return 具有指定名称的处理器。
     *         如果此管道中没有此类处理器，则返回 {@code null}。
     */
    ChannelHandler get(String name);

    /**
     * Returns the {@link io.netty.channel.ChannelHandler} of the specified type in this
     * pipeline.
     *
     * @return the handler of the specified handler type.
     *         {@code null} if there's no such handler in this pipeline.
     */

    /**
     * 返回此管道中指定类型的 {@link io.netty.channel.ChannelHandler}。
     *
     * @return 指定处理器类型的处理器。
     *         如果此管道中没有此类处理器，则返回 {@code null}。
     */
    <T extends io.netty.channel.ChannelHandler> T get(Class<T> handlerType);

    /**
     * Returns the context object of the specified {@link io.netty.channel.ChannelHandler} in
     * this pipeline.
     *
     * @return the context object of the specified handler.
     *         {@code null} if there's no such handler in this pipeline.
     */

    /**
     * 返回此管道中指定 {@link io.netty.channel.ChannelHandler} 的上下文对象。
     *
     * @return 指定处理器的上下文对象。
     *         {@code null} 如果此管道中没有该处理器。
     */
    ChannelHandlerContext context(ChannelHandler handler);

    /**
     * Returns the context object of the {@link io.netty.channel.ChannelHandler} with the
     * specified name in this pipeline.
     *
     * @return the context object of the handler with the specified name.
     *         {@code null} if there's no such handler in this pipeline.
     */

    /**
     * 返回此管道中具有指定名称的 {@link io.netty.channel.ChannelHandler} 的上下文对象。
     *
     * @return 具有指定名称的处理器的上下文对象。
     *         如果此管道中没有这样的处理器，则返回 {@code null}。
     */
    ChannelHandlerContext context(String name);

    /**
     * Returns the context object of the {@link io.netty.channel.ChannelHandler} of the
     * specified type in this pipeline.
     *
     * @return the context object of the handler of the specified type.
     *         {@code null} if there's no such handler in this pipeline.
     */

    /**
     * 返回此管道中指定类型的 {@link io.netty.channel.ChannelHandler} 的上下文对象。
     *
     * @return 指定类型的处理程序的上下文对象。
     *         如果此管道中没有此类处理程序，则返回 {@code null}。
     */
    ChannelHandlerContext context(Class<? extends io.netty.channel.ChannelHandler> handlerType);

    /**
     * Returns the {@link io.netty.channel.Channel} that this pipeline is attached to.
     *
     * @return the channel. {@code null} if this pipeline is not attached yet.
     */

    /**
     * 返回此管道所附加的 {@link io.netty.channel.Channel}。
     *
     * @return 通道。如果此管道尚未附加，则返回 {@code null}。
     */
    Channel channel();

    /**
     * Returns the {@link List} of the handler names.
     */

    /**
     * 返回处理器名称的 {@link List}。
     */
    List<String> names();

    /**
     * Converts this pipeline into an ordered {@link Map} whose keys are
     * handler names and whose values are handlers.
     */

    /**
     * 将此管道转换为一个有序的 {@link Map}，其键为处理器名称，值为处理器。
     */
    Map<String, ChannelHandler> toMap();

    @Override
    ChannelPipeline fireChannelRegistered();

    @Override
    ChannelPipeline fireChannelUnregistered();

    @Override
    ChannelPipeline fireChannelActive();

    @Override
    ChannelPipeline fireChannelInactive();

    @Override
    ChannelPipeline fireExceptionCaught(Throwable cause);

    @Override
    ChannelPipeline fireUserEventTriggered(Object event);

    @Override
    ChannelPipeline fireChannelRead(Object msg);

    @Override
    ChannelPipeline fireChannelReadComplete();

    @Override
    ChannelPipeline fireChannelWritabilityChanged();

    @Override
    ChannelPipeline flush();
}
